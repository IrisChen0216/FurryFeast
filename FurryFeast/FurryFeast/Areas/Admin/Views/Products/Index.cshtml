@{
	ViewData["Title"] = "Index";
	Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Style{
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
	<style>
		.unState {
			background-color: gray;
		}

		.btnState {
			display: inline-block;
		}

		.drop {
			background: #EC407A;
			color: white;
			box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
		}

			.drop:hover {
				background-color: #FFD306;
			}

		.btn-secondary:hover {
			box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);
		}

		input {
			outline-style: none;
			border: 1px solid #ccc;
			border-radius: 3px;
			padding-left: 5px;
			width: 100%;
			height: 30px;
		}

		.edit-btn {
			background: darkcyan;
			border-radius: 6px;
			border: 1px solid white;
			color: white;
		}

			.edit-btn a {
				color: white;
			}

		.delete-btn {
			background: crimson;
			border-radius: 6px;
			border: 1px solid white;
			color: white;
		}

		.down-btn {
			background: crimson;
			border-radius: 6px;
			border: 1px solid white;
			color: white;
		}

		.up-btn {
			background: darkcyan;
			border-radius: 6px;
			border: 1px solid white;
			color: white;
		}

		.up-down {
			font-size: larger;
			color: white;
		}

		.up-state {
			background: darkcyan;
			border-radius: 6px;
			border: 1px solid white;
		}

		.down-state {
			background: crimson;
			border-radius: 6px;
			border: 1px solid white;
		}

		.add-btn {
			background: darkcyan;
			border-radius: 6px;
			border: 1px solid white;
			color: white;
			height: 40px;
		}

		.h1Header > h4 {
			position: relative;
			padding-bottom: 17px;
		}

			.h1Header > h4:before {
				content: "";
				position: absolute;
				left: 25px;
				bottom: 6px;
				width: 100%;
				height: 4px;
				background: #ccc;
			}

	</style>
}

<div class="container-fluid" id="app">
	<div class="row">
		<div class="col-12">
			<div class="my-4" style="background: white; border-radius: 1rem; padding-bottom: 10px; padding: 10px 0px 10px 0px; border: 1px solid rgb(235 235 235);">
				<div class="row m-0 p-0">
					<div class="p-0 position-relative mt-n4 mx-3 z-index-2">
						<div class="border-radius-lg pt-4 ">
							<div class="mx-2 h1Header col-7 ">
								<h4 style="display: inline-block;" class="ms-1 m-0">Products</h4><h2 style="display: inline-block;" class="mt-3 mx-2">Index</h2>
							</div>
						</div>
					</div>
					@*<div class="row">*@


						<div class="dropdown mx-3 mt-2 col-1">
							<button class="btn btn-secondary dropdown-toggle drop" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
								商品專區
							</button>
							<ul class="dropdown-menu" aria-labelledby="dropdownMenu2">
								<li><button class="dropdown-item" type="button" v-on:click="Products">全部商品</button></li>
								<li><button class="dropdown-item" type="button" v-on:click="ProductType(1)">狗狗商品</button></li>
								<li><button class="dropdown-item" type="button" v-on:click="ProductType(2)">貓咪商品</button></li>
								<li><button class="dropdown-item" type="button" v-on:click="ProductType(3)">鮮食商品</button></li>
								<li><button class="dropdown-item" type="button" v-on:click="ProductType(4)">捐贈商品</button></li>
							</ul>
						</div>

						<div class="btnState mx-3 mt-2 pr-10 col-3">
							<button class="btn  mb-0 edit-btn" v-on:click="ProductState(1)">上架中</button>
							<button class="btn  mb-0 delete-btn unState" v-on:click="ProductState(0)">未上架</button>
						</div>
						<div class="btnState mx-3 mt-2 col-3">

							<button type="button" class="btn mb-0 add-btn" data-bs-toggle="modal" data-bs-target="#staticBackdrop" v-on:click="showInsertPage">
								<i class="bi bi-plus-circle up-down"></i> 商品
							</button>
							<button type="button" class="btn mb-0 add-btn" data-bs-toggle="modal" data-bs-target="#staticBackdrop" v-on:click="showInsertImgPage">
								<i class="bi bi-plus-circle up-down"></i> 商品圖片
							</button>
						</div>
						@*<div class="form-group  mt-2 col-2">


						</div>*@
						@*搜尋欄*@
					<div class="ms-md-auto pe-md-3 d-flex align-items-center col-3 mx-4">
							<div class="input-group input-group-outline">
								<label class="form-label">Search Product...</label>
							<input type="text" class="form-control h-100 search-input" v-model="keyword" @@keyup="productFilter">
							</div>
						</div>
					@*</div>*@
				</div>

				<div class="card-body p-0 pb-2">
					<div class="table-responsive p-0">
						<table class="table align-items-center mb-0">
							<thead>
								<tr>
									<th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">商品編號</th>
									<th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">商品名稱</th>
									<th class="text-uppercase text-secondary text-xxs font-weight-bolder opacity-7 ps-2">商品售價</th>
									<th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">調整上下架</th>
									<th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">上架時間</th>
									<th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">下架時間</th>
									<th class="text-secondary opacity-7"></th>
								</tr>
							</thead>
							<tbody>
								<tr v-for="item in ShowPageCount" :key="item.backEndProduct.productId">

									<td class="align-middle text-center">
										<span class="text-secondary text-xs font-weight-bold">{{item.backEndProduct.productId}}</span>
									</td>
									<td>
										<div class="d-flex px-2 py-1">
											<div>
												<img :src="'data:image/png;base64,'+item.backEndPics[0]" class="avatar avatar-sm me-3 border-radius-lg" alt="user1">
											</div>
											<div class="d-flex flex-column justify-content-center">

												<a :href="'Details?id='+item.backEndProduct.productId">
													<h6 class="mb-0 text-sm">{{item.backEndProduct.productName}}</h6>
													<p class="text-xs text-secondary mb-0">庫存:{{item.backEndProduct.productAmount}}</p>
												</a>
											</div>
										</div>
									</td>
									<td>
										<p class="text-xs font-weight-bold mb-0">${{item.backEndProduct.productPrice}}</p>

									</td>
									<td class="align-middle text-center text-sm">
										@*<span class="badge badge-sm bg-gradient-success">{{item.backEndProduct.productState}}</span>*@

										<button v-if="item.OnAndOff==true" class="ms-2 up-state" v-on:click="changeState(item)"><i class="bi bi-caret-up-fill up-down"></i></button>
										<button v-else class="ms-2 down-state" v-on:click="changeState(item)"><i class="bi bi-caret-down-fill up-down"></i></button>
										@*<button v-if="item.OnAndOff==true" class="btn up-btn mb-0" v-on:click="changeState(item)">上架</button>
										<button v-else class="btn mb-0 down-btn" v-on:click="changeState(item)">下架</button>*@
									</td>
									<td class="align-middle text-center">
										<span class="text-secondary text-xs font-weight-bold">{{item.backEndProduct.productLauchedTime}}</span>
									</td>
									<td class="align-middle text-center">
										<span class="text-secondary text-xs font-weight-bold">{{item.backEndProduct.productSoldTime}}</span>
									</td>
									<td class="align-middle">
										@*<a href="javascript:;" class="text-secondary font-weight-bold text-xs" data-toggle="tooltip" data-original-title="Edit user">
										Edit
										</a>*@
										@*<button class="btn bg-gradient-info mb-0 toast-btn"><a :href="'Details?id='+item.backEndProduct.productId">編輯</a></button>
										<button class="btn bg-gradient-danger  mb-0 toast-btn unState" v-on:click="deleteCheck(item)">刪除</button>*@
										<button class="btn  mb-0 edit-btn"><a :href="'Details?id='+item.backEndProduct.productId">編輯</a></button>
										<button class="btn  mb-0 delete-btn unState" v-on:click="deleteCheck(item)">刪除</button>
									</td>

								</tr>

							</tbody>
						</table>
					</div>
					<div class="row justify-content-center">
						<paginate :page-count="PageCount"
								  :click-handler="ChangePage"
								  :prev-text="'Prev'"
								  :next-text="'Next'"
								  :page-class="'page-item'"
								  :page-link-class="'page-link'"
								  :prev-class="'page-item'"
								  :prev-link-class="'page-link'"
								  :next-class="'page-item'"
								  :next-link-class="'page-link'"
								  :container-class="'pagination justify-content-center'">
						</paginate>
					</div>
				</div>
			</div>
		</div>
	</div>
	<div class="modal fade " id="insertPage" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="staticBackdropLabel">Modal title</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<label class="form-label">商品名稱:</label>
						<input class="form-control" v-model="productName" required />
					</div>
					<div class="form-group">
						<label class="form-label">商品售價:</label>
						<input class="form-control" v-model="productPrice" required />
					</div>
					<div class="form-group">
						<label class="form-label">上架數量:</label>
						<input class="form-control" v-model="productAmount" required />
					</div>
					<div class="form-group">
						<label class="form-label">上架狀態:</label>
						<select v-model="productState">
							<option value="">類型</option>
							<option value="0">未上架</option>
							<option value="1">上架</option>
						</select>
					</div>
					<div class="form-group">
						<label class="form-label">商品描述:</label>
						<input class="form-control" v-model="productDescription" />
					</div>
					<div class="form-group">
						<label class="form-label">商品類型:</label>

						<select v-model="productType">
							<option value="">類型</option>
							<option value="1">狗用</option>
							<option value="2">貓用</option>
							<option value="3">鮮食</option>
							<option value="4">捐贈</option>
						</select>
					</div>

					<div class="form-group">
						<label class="form-label">商品庫存名稱:</label>
						<select v-model="selectedArticle">
							<option value="">類型</option>
							<option v-for="item in backEndArticle" :value="item.backEndArticle.articleId">{{item.backEndArticle.articleName}}</option>
						</select>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" v-on:click="CloseInsertPage">關閉</button>
					<button type="button" class="btn btn-primary" v-on:click="AddProduct">新增</button>
				</div>
			</div>
		</div>
	</div>


	<div class="modal fade " id="insertImgPage" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true" enctype="multipart/form-data">
		<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="staticBackdropLabel">Modal title</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<label class="form-label">商品名稱:</label>

						<select v-model="selectedProductId">
							<option>--選擇--</option>
							<option v-for="item in backendProducts" :value="item.backEndProduct.productId">{{item.backEndProduct.productName}}</option>
						</select>
					</div>
					<div class="form-group">
						<label class="form-label">商品圖片1:</label>
						<input class="form-control" v-on:change="FileChange($event,0)" type="file" />
						<label class="form-label">商品圖片2:</label>
						<input class="form-control" v-on:change="FileChange($event,1)" type="file" />
						<label class="form-label">商品圖片3:</label>
						<input class="form-control" v-on:change="FileChange($event,2)" type="file" />
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal" v-on:click="CloseInsertPage">關閉</button>
					<button type="button" class="btn btn-primary" v-on:click="InsertImages">新增</button>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts{

	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script src="https://unpkg.com/vuejs-paginate@0.9.0"></script>
	<script>
		Vue.component('paginate', VuejsPaginate);
		let app = new Vue({
			el: '#app',
			data: {
				backendProducts: [],
				backEndArticle: [],
				showProducts: [],
				keyword: "",
				productName: "",
				productPrice: "",
				productAmount: "",
				productDescription: "",
				productType: "",
				productState: "",
				productLaunchedTime: "",
				productPicImage: ["", "", ""],
				selectedArticle: "",
				originState: [],
				selectedProductId: null,
				maxCount: 5,
				Page: 1,
			},
			mounted: function () {
				let _this = this;
				_this.Products();

			},
			methods: {
				//網頁載入就會掛載全部商品資料的方法
				Products: function () {
					let _this = this;
					let request = {};

					axios.get(`/api/products/backEndProducts`, request).then(response => {
						_this.backendProducts = _this.showProducts = response.data;

						var productList = [];
						for (var i = 0; i < _this.showProducts.length; i++) {
							var item = _this.showProducts[i];
							if (item.backEndProduct.productState == 1) {
								item.OnAndOff = false;

							}
							if (item.backEndProduct.productState == 0) {
								item.OnAndOff = true;
							}
							productList.push(item);
						}
						_this.showProducts = productList;
					});
					axios.get(`/api/products/backEndArticle`, request).then(response => {
						_this.backEndArticle = response.data;
					});
				},
				productFilter: function () {
					//依照搜尋欄位篩選商品(Id、Name)
					let _this = this;
					let request = {};
					//_this.showProducts = [];

					//for (let i = 0; i < _this.backendProducts.length; i++) {
					//	let item = _this.backendProducts[i];
					//	let itemId = item.backEndProduct.productId.toString();
					//	if (itemId.includes(parseInt(_this.keyword))) {
					//		_this.showProducts.push(item);
					//	}
					//	else if (item.backEndProduct.productName.includes(_this.keyword)) {
					//		_this.showProducts.push(item);
					//	}
					//}
					_this.showProducts = _this.backendProducts;
					_this.showProducts = _this.showProducts.filter(item => item.backEndProduct.productName.includes(_this.keyword));

				},
				changeState: function (item) {
					let _this = this;
					let ID = parseInt(item.backEndProduct.productId);
					let ProductList = [];
					let currentState = item.backEndProduct.productState;
					if (item.OnAndOff == true) {
						if (confirm('確定要上架?')) {
							axios.put(`/api/products/PutProductState/?id=${ID}&state=1`).then(response => {
								alert(response.data);
								item.OnAndOff = false;
								for (let i = 0; i < _this.showProducts.length; i++) {
									let product = _this.showProducts[i];
									ProductList.push(product);
								};
								_this.showProducts = ProductList;

							});
						}


					}
					else {
						if (confirm('確定要下架?')) {
							axios.put(`/api/products/PutProductState/?id=${ID}&state=0`).then(response => {
								alert(response.data);
								item.OnAndOff = true;
								item.backEndProduct.productSoldTime = new Date();
								for (let i = 0; i < _this.showProducts.length; i++) {
									let product = _this.showProducts[i];
									ProductList.push(product);
								};
								_this.showProducts = ProductList;

							});
						}

					}

				},
				showInsertPage: function () {
					const myModal = new bootstrap.Modal('#insertPage')
					myModal.show();
				},
				showInsertImgPage: function () {
					const myModal = new bootstrap.Modal('#insertImgPage')
					myModal.show();
				},

				CloseInsertPage: function () {
					const myModal = new bootstrap.Modal('#insertPage')
					myModal.hide();
				},
				deleteCheck: function (item) {
					let _this = this;
					Swal.fire({
						title: `確定要此刪除嗎?`,
						text: `商品編號:${item.backEndProduct.productId}，商品名稱:${item.backEndProduct.productName}`,
						icon: 'warning',
						showCancelButton: true,
						confirmButtonColor: '#3085d6',
						cancelButtonColor: '#d33',
						confirmButtonText: '刪除',
						cancelButtonText: '取消',
					}).then((result) => {
						if (result.isConfirmed) {
							_this.deleteProduct(item.backEndProduct.productId);
							Swal.fire(
								'Deleted!',
								'Your file has been deleted.',
								'success'
							)
						}
					})
				},
				deleteProduct: function (ID) {
					let _this = this;
					axios.delete(`/api/products/DeleteProduct/${ID}`).then(response => {
						alert(response.data);
						_this.Products();

					});
				},
				AddProduct: function () {
					let _this = this;
					let date = new Date();
					//let formattedDate = date.toLocaleString('en-US', { timeZone: 'Asia/Taipei' });
					console.log(date);
					let request = {
						ProductId: 0,
						ProductName: _this.productName,
						ProductAmount: _this.productAmount,
						ProductPrice: _this.productPrice,
						ProductState: _this.productState,
						ProductDescription: _this.productDescription,
						ProductTypeId: _this.productType,
						ProductLaunchedTime: new Date(),
						ArticlesId: _this.selectedArticle,


					};
					console.log(date.toISOString());
					axios.post(`/api/products/PostProduct/`, request).then(response => {
						alert(response.data);
						_this.Products();

						_this.productName = "";
						_this.productPrice = "";
						_this.productAmount = "";
						_this.productDescription = "";
						_this.productType = "";
						_this.productState = "";
						_this.selectedArticle = "";

					});

				},
				FileChange: function (event, idx) {
					let _this = this;
					_this.productPicImage[idx] = event.target.files[0];
				},
				InsertImages: function () {
					let _this = this;
					let formData = new FormData();

					formData.append('ProductId', _this.selectedProductId);
					for (let i = 0; i < 3; i++) {
						if (_this.productPicImage[i] != null) {
							formData.append('ProductPicImage', _this.productPicImage[i]);
						}
					};

					axios.post(`/api/products/PostProductImage/`, formData).then(response => {
						alert(response.data);
						_this.Products();
						_this.productPicImage = ["", "", ""];
					});
				},
				ProductType: function (typeNum) {
					let _this = this;
					alert(typeNum);
					axios.get(`/api/products/backEndProductsType?type=${typeNum}`).then(response => {
						_this.showProducts = _this.backendProducts = response.data;
						var productList = [];
						for (var i = 0; i < _this.showProducts.length; i++) {
							var item = _this.showProducts[i];
							if (item.backEndProduct.productState == 1) {
								item.OnAndOff = false;

							}
							if (item.backEndProduct.productState == 0) {
								item.OnAndOff = true;
							}
							productList.push(item);
						}
						_this.showProducts = _this.backendProducts = productList;
					});
				},
				ProductState: function (state) {

					let _this = this;
					_this.showProducts = _this.backendProducts;
					_this.showProducts = _this.originState = _this.showProducts.filter(item => item.backEndProduct.productState == state);

				},
				ChangePage: function (currentPage) {
					let _this = this;
					_this.Page = currentPage;
				},
				//sortBy: function (val) {
				//	let _this = this;
				//	//依照時間排序
				//	if (val == 'time') {
				//		return _this.showProducts.sort((a, b) => new Date(a.product.productLauchedTime) - new Date(b.product.productLauchedTime));
				//	}
				//	//依照價格排序
				//	if (val == 'price') {
				//		return _this.showProducts.sort((a, b) => a.product.productPrice - b.product.productPrice);
				//	}
				//},
				//ProductType:function(val){
				//	let _this = this;
				//	if (val == 'food') {
				//		return _this.showProducts.sort((a, b) => a.product.productPrice - b.product.productPrice);
				//	}
				//}
			},
			computed: {
				PageCount: function () {
					let _this = this;
					return Math.ceil(_this.showProducts.length / _this.maxCount);
				},
				ShowPageCount: function () {
					let _this = this;
					let start = (_this.Page - 1) * _this.maxCount;
					let end = _this.Page * _this.maxCount;
					return _this.showProducts.slice(start, end);
				},
			},

		});

	</script>
    }


