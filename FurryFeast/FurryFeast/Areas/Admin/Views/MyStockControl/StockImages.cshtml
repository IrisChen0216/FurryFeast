@{
	ViewData["Title"] = "StockImages";
	Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Style{
	<style>
		/*固定 table 高度*/
		.table-responsive {
			overflow: auto;
			height: 74.2vh;
		}
		/*選擇 table 效果*/
		.tableHover:hover {
			background-color: #DFE7F2;
			color: #000000;
			cursor: pointer;
		}
		/*選中的 tr*/
		.trColor {
			background-color: #DFE7F2;
		}
		/*下拉選單選中時外框*/
		.form-select:focus {
			border-color: #d2d6da;
			outline: 0;
			box-shadow: none;
		}

		.form-select {
			padding-left: 10px;
		}
		/*產品上架下架位置調整*/
		.btnMargonTop {
			/*margin-bottom: 1rem;*/
			margin-top: 0.4rem;
		}
		/*選擇檔案外框和背景色*/
		.form-control::file-selector-button {
			padding: 0.375rem 0.75rem;
			margin: -0.375rem -0.75rem;
			-webkit-margin-end: 0.75rem;
			margin-inline-end: 0.75rem;
			color: #212529;
			background-color: #e9ecef;
			pointer-events: none;
			border-color: inherit;
			border-style: solid;
			border-width: 0;
			border-inline-end-width: 1px;
			border-radius: 0;
			transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
		}

		.form-control:focus {
			color: #212529;
			background-color: #fff;
			border-color: #86b7fe;
			outline: 0;
			box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
		}

		.form-control {
			border: 1px solid #d2d6da;
		}
	</style>
}

<div class="container-fluid" id="app">
	<div class="row">
		<div class="col-12">
			<div class="card my-4">

				<div class="card-header p-0 position-relative mt-n4 mx-3 z-index-2">
					<div class="bg-gradient-primary shadow-primary border-radius-lg pt-4 pb-3 ">
						<h6 class="text-white text-capitalize ps-3">物品圖片</h6>
					</div>
				</div>

				<div class="row">
					<div class="btnState mx-3 mt-2 pr-10 col-3">
						<button class="btn bg-gradient-info  mb-0 toast-btn" v-on:click="insertData">新增</button>
						<button class="btn bg-gradient-danger  mb-0 toast-btn" v-on:click="deleteCheck">刪除</button>
					</div>
				</div>

				<div class="row">
					<div class="col-md-2">
						<div class="card-body px-0 pb-2">
							<div class="table-responsive p-0">

								@*搜尋產品*@
								<div class="mx-md-2 mt-2 d-flex align-items-center">
									<div class="input-group input-group-outline">
										<label class="form-label">搜尋編號或名稱...</label>
										<input type="text" class="form-control" v-model="keyWord" v-on:keyup="productFilter">
									</div>
								</div>

								<table class="table align-items-center mb-0 strap" v-if="spinner">
									<thead>
										<tr>
											<th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">編號</th>
											<th class="text-center text-uppercase text-secondary text-xxs font-weight-bolder opacity-7">名稱</th>
										</tr>
									</thead>
									<tbody>
										@*給選中的 tr 上個底色*@
										<tr class="tableHover" v-for="item in showData" v-bind:key="item.imagesId" v-on:click="clickArticle(item)" v-bind:class="{trColor : item.imagesId == choseTableData.imagesId}">
											<td class="align-middle text-center">
												<span class="text-secondary text-xs font-weight-bold">{{item.imagesCode}}</span>
											</td>
											<td class="align-middle text-center">
												<span class="text-secondary text-xs font-weight-bold">{{item.imagesDescription}}</span>
											</td>
										</tr>
									</tbody>
								</table>

								@*bs spinner 動畫*@
								<partial name="_Spinner"></partial>
							</div>
						</div>
					</div>

					<div class="col-md-10">
						<div class="card-body px-0 pb-2">
							<div class="table-responsive p-3">

								<div class="row">
									<div class="col-md-4">
										@*判斷點選某筆 table 資料時加上 class outline 效果*@
										<div v-bind:class="flag_classOutline ? classOutlineShow : classOutlineOff">
											<label class="form-label">編號</label>
											<input type="text" class="form-control" v-model="choseTableData.imagesCode">
										</div>
									</div>
									<div class="col-md-4">
										<div v-bind:class="flag_classOutline ? classOutlineShow : classOutlineOff">
											<label class="form-label">描述</label>
											<input type="text" class="form-control" v-model="choseTableData.imagesDescription">
										</div>
									</div>
								</div>

								@*上傳和預覽圖片*@
								<div class="row">
									<div class="col-md-8">
										<div class="mt-2">
											<img id="imgLoad" class="img-fluid" v-bind:src="'data: image/jpeg;base64,' + choseTableData.imagesBitmapFile" />
											<div class="mt-2">
												<input class="form-control" type="file" v-on:change="fileSelected">
											</div>
										</div>
									</div>
								</div>

								<div class="row">
									<div class="btnState  mt-2 pr-10 col-3">
										<button class="btn bg-gradient-success  mb-0 toast-btn" v-on:click="patchData">更新</button>
										<button class="btn bg-gradient-warning  mb-0 toast-btn" v-on:click="cleanData">清除</button>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@section Scripts{
	<script>

		let app = new Vue({
			el: '#app',
			data: {
				Source: {
					StockImagesData: [],
				},
				keyWord: "",
				showData: [],
				choseTableData: {
					"imagesCode": "",
					"imagesDescription": "",
					"imagesId": 0,
					"imagesFileCrc": 1,
					"imagesBitmapFile": [],
				},
				flag_classOutline: false,
				classOutlineShow: "input-group input-group-outline mt-2 focused is-focused is-filled",
				classOutlineOff: "input-group input-group-outline mt-2",
				spinner: false,
			},
			mounted: function () {
				this.StockImages();
			},
			computed: {

			},
			methods: {
				StockImages: async function () {
					let _this = this;
					await axios.get(`/api/StockImagesApi/GetAll`).then(response => {
						_this.Source.StockImagesData = response.data;
						_this.showData = _this.Source.StockImagesData;
					});
					this.spinner = true;
				},
				// 搜尋產品
				productFilter: function () {
					let _this = this;
					this.showData = this.Source.StockImagesData.filter(data => data.imagesCode.includes(_this.keyWord) || data.imagesDescription.includes(_this.keyWord));
				},
				// 選擇產品 做深度拷貝 先轉成字串再轉回JSON 避免右邊資料影響左邊
				clickArticle: function (data) {
					this.choseTableData = JSON.parse(JSON.stringify(data));
					this.flag_classOutline = true;
				},
				// 清除資料
				cleanData: function () {
					this.choseTableData = {
						"imagesCode": "",
						"imagesDescription": "",
						"imagesId": 0,
						"imagesFileCrc": 1,
						"imagesBitmapFile": [],
					};
					this.flag_classOutline = false;
				},
				// 新增資料 請求改成同步
				insertData: function () {
					let _this = this;
					this.choseTableData.imagesId = 0;

					// didOpen() = 異步鉤子, showLoading() = 轉圈圈
					Swal.fire({
						title: `新增中...`,
						html: `<b>編號: ${this.choseTableData.imagesCode}, 描述: ${this.choseTableData.imagesDescription}.</b>`,
						didOpen: async () => {
							Swal.showLoading()
							await axios.post(`/api/StockImagesApi/PostData`, _this.choseTableData).then(response => {
								Swal.fire({
									title: `新增成功!`,
									text: response.data,
									icon: 'success',
									confirmButtonColor: '#3085d6',
									confirmButtonText: `確認`,
								});
							}).catch(error => {
								Swal.fire({
									title: `錯誤!`,
									text: error.response.data,
									icon: 'error',
									confirmButtonColor: '#3085d6',
									confirmButtonText: `確認`,
								});
							});
							this.spinner = false;
							this.StockImages();
							this.cleanData();
						},
					});
				},
				// 刪除確認
				deleteCheck: function () {
					Swal.fire({
						title: `確認刪除?`,
						text: `編號: ${this.choseTableData.imagesCode}, 描述: ${this.choseTableData.imagesDescription}.`,
						icon: 'warning',
						showCancelButton: true,
						confirmButtonColor: '#3085d6',
						cancelButtonColor: '#d33',
						confirmButtonText: `刪除`,
						cancelButtonText: '取消',
					}).then((result) => {
						if (result.isConfirmed) {
							this.deleteData();
						}
					});
				},
				// 刪除資料 請求改成同步
				deleteData: async function () {
					let _this = this;

					// didOpen() = 異步鉤子, showLoading() = 轉圈圈
					Swal.fire({
						title: `刪除中...`,
						html: `<b>編號: ${this.choseTableData.imagesCode}, 描述: ${this.choseTableData.imagesDescription}.</b>`,
						didOpen: async () => {
							Swal.showLoading()
							await axios.delete(`/api/StockImagesApi/DeleteData/${this.choseTableData.imagesCode}`).then(response => {
								Swal.fire({
									title: `刪除成功!`,
									text: response.data,
									icon: 'success',
									confirmButtonColor: '#3085d6',
									confirmButtonText: `確認`,
								})
							}).catch(error => {
								Swal.fire({
									title: `錯誤!`,
									text: error.response.data,
									icon: 'error',
									confirmButtonColor: '#3085d6',
									confirmButtonText: `確認`,
								});
							});
							this.spinner = false;
							this.StockImages();
							this.cleanData();
						},
					});
				},
				// 更新資料 請求改成同步
				patchData: async function () {
					let _this = this;

					// didOpen() = 異步鉤子, showLoading() = 轉圈圈
					Swal.fire({
						title: `更新中...`,
						html: `<b>編號: ${this.choseTableData.imagesCode}, 描述: ${this.choseTableData.imagesDescription}.</b>`,
						didOpen: async () => {
							Swal.showLoading()
							await axios.patch(`/api/StockImagesApi/PatchData`, _this.choseTableData).then(response => {
								Swal.fire({
									title: `更新成功!`,
									text: response.data,
									icon: 'success',
									confirmButtonColor: '#3085d6',
									confirmButtonText: `確認`,
								});
							}).catch(error => {
								Swal.fire({
									title: `錯誤!`,
									text: error.response.data,
									icon: 'error',
									confirmButtonColor: '#3085d6',
									confirmButtonText: `確認`,
								});
							});
							this.spinner = false;
							this.StockImages();
						},
					});
				},
				// 上傳和預覽圖片
				fileSelected(e) {
					let _this = this;
					const file = e.target.files.item(0);
					const reader = new FileReader();
					reader.addEventListener('load', function (e) {
						_this.choseTableData.imagesBitmapFile = e.target.result.split(",")[1];
					});
					reader.readAsDataURL(file);
				},
			},
		});
	</script>
    }