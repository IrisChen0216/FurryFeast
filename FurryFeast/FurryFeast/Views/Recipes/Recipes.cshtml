@model IEnumerable<Recipe>

@{
	ViewData["Title"] = "Recipes";
}

@section Style
{
	<link href="~/css/recipestyle.css" rel="stylesheet"/>
}

<div class="index-header">
	<h2>寵物鮮食食譜</h2>
</div>
<div id="app" class="container">
	<div class="row m-4">
		<button class="col btn btn-primary p-5 " type="button" v-on:click="chooseType(1)">Dog</button>
		<button class="col btn btn-primary p-5 ms-3" type="button" v-on:click="chooseType(2)">Cat</button>
	</div>
	<div class="row m-4">
		<div class="col-md-3  pt-4">
			<ul id="recipesList" class="nav justify-content-center">
				<li class="nav-item" v-for="item in filteredRecipe" :key="item.recipesId" v-on:click="getRecipe(item)">{{item.name}}</li>
			</ul>
		</div>

		<div class="col p-3 ms-3" v-if="showRecipeDetails">
			<div class="border border-1 m-3 p-3" style="height: auto">
				<div class="index-header row">
					<h4 class="py-3">{{selectedRecipe.name}}</h4>
					@*<div class="line"></div>*@
					<div class="mx-auto px-3 pb-2" style="font-weight: 900; padding: 20px; width: 90%;">{{selectedRecipe.desc}}</div>
				</div>
				<div class="row m-3">
					<div class="col p-0">
						<div class="recipes-card  me-2  mb-2" style="background: cadetblue; border-radius: 6px;">
							<p style="font-size: 18px;color: white;letter-spacing: 3px;font-weight: 600;">準備食材</p>
						</div>
						<ul>
							<li v-for="item in selectedRecipeData">{{item}}</li>
						</ul>
					</div>
					<div class="col p-0">
						<div class="recipes-card mb-2" style="background: cadetblue; border-radius: 6px;">
							<p style="font-size: 18px;color: white;letter-spacing: 3px;font-weight: 600;">作法</p>
						</div>
						<ul>
							<li v-for="item in selectedRecipeMethod">{{item}}</li>
						</ul>
					</div>
				</div>
				<div class="row m-3">
					<div class="col border border-2 rounded-4 p-4">
						<h5>Notes</h5>
						<span>{{selectedRecipe.notes}}</span>
					</div>
				</div>
			</div>
			<div class="container text-center mb-2">
				<h4 class="py-3">回應區</h4>
				<template v-if="selectedRecipe">
					<template v-if="MemberData!=null">
						<form class="input-group">
							<textarea class="form-control" style="border-radius: 6px; margin-right: 9px;" v-model="commentContent" required></textarea>
							<button type="submit" style="border-radius: 6px;" class="btn btn-primary" v-on:click="addComment">送出</button>
						</form>
					</template>
					<template v-else>
						<div class="border border-1 p-4 my-2">
							<p class="mb-2">請先登入會員</p>
							<a href="/Member/Login" class="nBtn">登入</a>
						</div>
					</template>
				</template>


				@*msg*@
				<div class="response mt-3">
					<template v-for="item in selectedRecipe.msgBoards">
						<div class="m-4" v-if="">
							<div class="my-2 align-content-end" v-if="!item.isEditable">
								<div class="row pb-2" style="border-bottom: 1px dashed #ccc;">
									<div class="text-end" v-if="MemberData!=null">
										<template v-if="MemberData.memberAccount == item.userAccount">
											<button type="button" class="nBtn edit" v-on:click="editComment(item);">編輯</button>
											<button type="button" class="nBtn delete" v-on:click="deleteComment();">刪除</button>
										</template>
									</div>
									<div class="col px-3 py-2 m-0 text-start">
										<p class="m-0 px-3 user-icon ">會員</p>
										<p class="ms-1" style="display: inline-block; font-weight: 600">{{item.userAccount}}</p>
										<p class="m-0 ps-2 pt-1" style="font-size: small;">{{relativeDate(item)}}</p>
									</div>

									<div class="px-3 py-2 m-0 col-8 text-start" v-if="item.editedMsgRecords.length==0">
										<p>{{item.content}}</p>
									</div>
									<div v-else class="px-3 py-2 m-0 col-8" style="max-height: 100%;">
										<div class="text-start" style="height: auto">
											<p>{{item.editedMsgRecords[item.editedMsgRecords.length-1].editedText}}</p>
										</div>
										<div class="text-end m-0" style="color: gray; font-size: small;" v-on:click="editedRecord(item)" data-swal-toast-template="#my-template">
											已編輯
										</div>
									</div>
								</div>
							</div>
							@*editing*@
							<div v-else>
								<p class="fw-bold">編輯留言</p>
								<form class="input-group pt-2">
									<textarea class="form-control" style="border-radius: 6px" v-model="editedContent" required></textarea>
									<button type="button" class="btn btn-primary ms-2" style="border-radius: 6px;" v-on:click="updateComment(item)">更新</button>
									<button type="button" class="btn btn-primary ms-2" style="border-radius: 6px;" v-on:click="cancelEditing(item)">取消</button>
								</form>
							</div>

						</div>
					</template>
				</div>
			</div>
		</div>
	</div>
</div>


@section Scripts
{
	<script src="https://unpkg.com/dayjs@1.8.21/dayjs.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/dayjs@1.10.7/plugin/relativeTime.js"></script>

	<script>

		let app = new Vue({
			el: '#app',
			data: {
				MemberData: [],
				editedMsg: [],
				recipes: [],
				filteredRecipe: [], //type篩選出來的食譜
				selectedRecipe: [],
				selectedRecipeId: null, //點擊到的食譜
				selectedRecipeData: "",
				selectedRecipeMethod: "",
				commentContent: "",
				editedContent: "",
				dateTime: "",
				showRecipeDetails: false
			},
			mounted() {
				const _this = this;
				_this.allRecipes();
				_this.getUserData();
			},
			methods: {
				getUserData: function() {
					const _this = this;
					axios('/api/recipes/GetUserData').then(response => {
						if (response.status) {
							_this.MemberData = response.data.data;
						}
						console.log(_this.MemberData);
					});
				},

				relativeDate: function(item) {
					dayjs.locale('zh-cn',
						{
							relativeTime: {
								future: "in %s",
								past: "%s前",
								s: '幾秒前',
								m: "1 分",
								mm: "%d 分",
								h: "an 小時",
								hh: "%d 小時",
								d: "a 天",
								dd: "%d 天",
								M: "a 個月",
								MM: "%d 個月",
								y: "a 年",
								yy: "%d 年"
							}
						});
					// 相對時間
					dayjs.extend(dayjs_plugin_relativeTime);
					return dayjs(item.dateTime).fromNow();
				},

				allRecipes: function() {
					const _this = this;
					const request = {};
					axios.get('/api/recipes/AllData', request).then(response => {
						_this.recipes = response.data;
						const recipesData = [];

						for (let i = 0; i < _this.recipes.length; i++) {
							const item = _this.recipes[i].allData;
							item.Edit = false; // 編輯狀態
							item.isVisible = true; // 隱藏狀態

							item.msgBoards = item.msgBoards.map((msgBoard) => ({
								...msgBoard,
								isEditable: false
							}));

							recipesData.push(item);
						}

						_this.recipes = recipesData;
						console.log(_this.recipes);
					});
				},

				chooseType: function(typeNum) {

					const _this = this;
					_this.filteredRecipe = [];

					for (let i = 0; i < _this.recipes.length; i++) {
						if (_this.recipes[i].petTypesId == typeNum) { //type:1= dog,2=cat
							const recipeData = _this.recipes[i];
							_this.filteredRecipe.push(recipeData);
						}
					}
					if (typeNum == 1) {
						_this.getRecipe(this.filteredRecipe[0]);
					} else {
						_this.getRecipe(this.filteredRecipe[0]);
					}
				},

				splitArr: function(item, symbol) {
					return item.split(symbol);
				},

				getRecipe: function(item) {
					const _this = this;
					_this.selectedRecipeId = item.recipesId;
					_this.selectedRecipe = item;
					_this.selectedRecipeData = _this.splitArr(item.data, "/");
					_this.selectedRecipeMethod = _this.splitArr(item.method, "/");
					_this.showRecipeDetails = true;
				},

				//post 新增
				addComment: function() {
					const _this = this;

					const msgboard = {
						MsgId: _this.MemberData.memberId,
						MsgRecipesId: _this.selectedRecipe.recipesId,
						MsgContent: _this.commentContent, //留言內容
						MsgDateTime: new Date, //時間
						MsgActive: true //狀態
					};

					axios.post('/api/recipes/AddComment', msgboard)
						.then(response => {
							console.log(response);
							if (response == "success")
								this.addCommentSuccess(response); // success feedback
							this.commentContent = ''; // empty content
						});

				},
				//success
				addCommentSuccess: function() {
					Swal.fire({
						position: 'center',
						icon: 'success',
						title: '留言成功',
						showConfirmButton: false,
						timer: 1500
					});
				},
				editCommentSuccess: function() {
					Swal.fire({
						position: 'center',
						icon: 'success',
						title: '編輯成功',
						showConfirmButton: false,
						timer: 1500
					});
				},

				// Edit
				editComment: function(item) {
					item.isEditable = true;
					if (item.editedMsgRecords.length == 0) {
						this.editedContent = item.content;
					} else {
						this.editedContent = item.editedMsgRecords[item.editedMsgRecords.length - 1].editedText;
					}
					console.log(this.MemberData);
				},

				//update
				updateComment: function(item) {
					const _this = this;
					item.isEditable = false;
					item.content = this.editedContent;

					const editedMsgRecord = {
						MsgId: item.msgId,
						EditedText: _this.editedContent,
						Msg: _this.commentContent
					};
					axios.post('/api/recipes/EditedMsg', editedMsgRecord)
						.then(response => {
							this.editCommentSuccess(response); // success feedback
						});

				},

				//cancel
				cancelEditing: function(item) {
					item.isEditable = false;
					this.editedContent = '';
				},

				editedRecord: function(item) {
					let firstTime = dayjs(item.dateTime).fromNow();
					let firstText = `<div class="edit-Record"><div class="edited-text d-inline">${item.content}</div><div class="edited-time d-inline">${firstTime}</div></div>`;

					let editedRecordsArray = item.editedMsgRecords.map(record => {
						let editedTime = dayjs(record.editedTime).fromNow();
						return `<div class="edit-Record"><div class="edited-text d-inline">${record.editedText}</div><div class="edited-time d-inline">${editedTime}</div></div>`;
					});
					editedRecordsArray.unshift(firstText);
					const arrayText = editedRecordsArray.join('<br>');
					Swal.fire({
						icon: 'info',
						title: '編輯紀錄',
						html: arrayText,
						showConfirmButton: true,
						scrollbarPadding: true
					});


				}
			}
		});
	</script>
}