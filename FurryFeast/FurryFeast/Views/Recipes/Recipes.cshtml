@model IEnumerable<FurryFeast.Models.Recipe>

@{
	ViewData["Title"] = "Recipes";
}
@section Style
{
	<link href="~/css/recipestyle.css" rel="stylesheet" />
}

<div class="index-header">
	<h2>寵物鮮食食譜</h2>
</div>
<div id="app" class="container">
	<div class="row m-4">
		<button class="col btn btn-primary p-5 " type="button" v-on:click="chooseType(1)">Dog</button>
		<button class="col btn btn-primary p-5 ms-3" type="button" v-on:click="chooseType(2)">Cat</button>
	</div>
	<div class="row m-4">
		<div class="col-md-3  pt-4">
			<ul id="recipesList" class="nav justify-content-center">
				<li class="nav-item" v-for="item in filteredRecipe" :key="item.recipesId" v-on:click="getRecipe(item)">{{item.name}}</li>
			</ul>
		</div>

		<div class="col p-3 ms-3" v-if="showRecipeDetails"> 
			<div class="index-header row">
				<h4 class="py-3">{{selectedRecipe.name}}</h4>
				@*<div class="line"></div>*@
				<div class="mx-auto px-3 pb-2" style="width: 90%;background: darkseagreen;padding: 20px;border-radius: 6px;color: white;font-weight: 900;">{{selectedRecipe.desc}}</div>
			</div>
			<div class="row m-3">
				<div class="col border border-2  p-4 rounded-4">
					<h5>準備食材</h5>
					<ul v-for="item in selectedRecipeData">
						<li>{{item}}</li>
					</ul>
				</div>
				<div class="col border border-2 ms-4 p-4 rounded-4">
					<h5>作法</h5>
					<ol v-for="item in selectedRecipeMethod">
						<li>{{item}}</li>
					</ol>
				</div>
			</div>
			<div class="row m-3">
				<div class="col border border-2 rounded-4 p-4">
					<h5>Notes</h5>
					<span>{{selectedRecipe.notes}}</span>
				</div>
			</div>
			<div class="container text-center mb-2">
				<h4 class="py-3">回應區</h4>
				<template v-if="selectedRecipe">
					<form class="input-group">
						<textarea class="form-control" style="border-radius: 6px; margin-right: 9px;" v-model="commentContent" required></textarea>
						<input type="hidden" class="form-control" v-model="active"/>
						<button type="submit" style="border-radius: 6px;" class="btn btn-primary" v-on:click="addComment">送出</button>
					</form>
				</template>
				<template v-else>
					<div class="border border-2 m-4 p-4">
						<p>您尚未登入會員</p>
					</div>
				</template>
				
				
				@*msg*@

				<div v-for="item in selectedRecipe.msgBoards">

					<div class="m-4" v-if="">
						<div class="my-2 align-content-end" v-if="!item.isEditable">
							<template v-if="LoginState == true">
								<button type="button" class="btn btn-sm" v-on:click="editComment(item);">編輯</button>
								<button type="button" class="btn btn-sm" v-on:click="deleteComment();">刪除</button>
							</template>
							<div class="row pb-2" style="border-bottom: 1px dashed #ccc;">
								<div class="col-3 px-3 py-2 m-0 text-start">
									<p class="fw-bold m-0 p-0">{{item.userId}}</p>
									<p class="m-0 p-0" style="font-size: small;">{{item.dateTime}}</p>
								</div>

								<div class="px-3 py-2 m-0 col text-start" v-if="item.editedMsgRecords.length==0">
									<p>{{item.content}}</p>
								</div>
								<div v-else class="px-3 py-2 m-0 col" style="max-height: 100%">
									<div class="text-start" style="height: 70%">{{item.editedMsgRecords[item.editedMsgRecords.length-1].editedText}}</div>
									<div class="text-end m-0" style="font-size: small; color: gray" v-on:click="editedRecord(item)" data-swal-toast-template='#my-template'>
										已編輯
									</div>
								</div>
							</div>
						</div>
							@*editing*@
							<div v-else>
								<p class="fw-bold">編輯留言</p>
								<form class="input-group pt-2">
								<textarea class="form-control" style="border-radius: 6px" v-model="editedContent" required></textarea>
									@*<input type="hidden" class="form-control" v-model="active"/>*@
									<button type="button" class="btn btn-primary ms-2" style="border-radius: 6px;" v-on:click="updateComment(item)">更新</button>
									<button type="button" class="btn btn-primary ms-2" style="border-radius: 6px;" v-on:click="cancelEditing(item)">取消</button>
								</form>
							</div>

					</div>
				</div>
			</div>
		</div>
	</div>
</div>



@section Scripts
{
	<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


	<script>

		let app = new Vue({
			el: '#app',
			data: {
				LoginState: false,
				MemberData: [],
				editedMsg: [],
				recipes: [],
				filteredRecipe: [], //type篩選出來的食譜
				selectedRecipe: [],
				selectedRecipeId: null, //點擊到的食譜
				selectedRecipeData: "",
				selectedRecipeMethod: "",
				commentContent: "",
				active: "true",
				editedContent: "",
				showRecipeDetails: false
			},
			mounted() {
				let _this = this;
				_this.allRecipes();
				_this.getUserData();
			},
			methods: {
				getUserData: function () {
					let _this = this;
					axios('/api/recipes/GetUserData').then(response => {
						if (response.status) {
							_this.MemberData = response.data.data;
						}
					});
				},

				allRecipes:  function() {
					let _this = this;
					let request = {};
					axios.get('/api/recipes/AllData', request).then(response => {
						_this.recipes = response.data;
						let recipesData = [];

						for (let i = 0; i < _this.recipes.length; i++) {
							let item = _this.recipes[i].allData;
							item.Edit = false; // 編輯狀態
							item.isVisible = true; // 隱藏狀態

							item.msgBoards = item.msgBoards.map((msgBoard) => ({
								...msgBoard,
								isEditable: false
							}));

							recipesData.push(item);
						}

						_this.recipes = recipesData;
					});
				},

				chooseType: function(typeNum) {

					let _this = this;
					_this.filteredRecipe = [];

					for (let i = 0; i < _this.recipes.length; i++) {
						if (_this.recipes[i].petTypesId == typeNum) { //type:1= dog,2=cat
							let recipeData = _this.recipes[i];
							_this.filteredRecipe.push(recipeData);
							_this.showRecipeDetails = false;
						}
					}


				},

				splitArr: function(item, symbol) {
					return item.split(symbol);
				},

				getRecipe: function(item) {
					let _this = this;
					_this.selectedRecipeId = item.recipesId;
					_this.selectedRecipe = item;
					_this.selectedRecipeData = _this.splitArr(item.data, "/");
					_this.selectedRecipeMethod = _this.splitArr(item.method, "/");
					_this.showRecipeDetails = true;
					
					for (let i = 0; i < _this.selectedRecipe.msgBoards.length; i++) {
						if (_this.MemberData !=null && _this.MemberData.memberName == _this.selectedRecipe.msgBoards[i].userId) {
							_this.LoginState = true;
						} else {
							_this.LoginState = false;
						}
					}

				},

				//post 新增
				addComment: function() {
					let _this = this;

					let msgboard = {
						UserId: _this.MemberData.memberName,
						MsgRecipesId: _this.selectedRecipe.recipesId,
						MsgContent: _this.commentContent, //留言內容
						MsgDateTime: new Date, //時間
						MsgActive: _this.active //狀態
					}

					axios.post('/api/recipes/AddComment', msgboard)
						.then(response => {
							if (response == "success")
								this.addCommentSuccess(response); // success feedback
							this.commentContent = ''; // empty content
						});

				},
				//success
				addCommentSuccess: function() {
					Swal.fire({
							position: 'center',
							icon: 'success',
							title: '留言成功',
							showConfirmButton: false,
							timer: 1500
						});
				},

				// Edit
				editComment: function(item) {
					item.isEditable = true;
					if (item.editedMsgRecords.length == 0) {
						this.editedContent = item.content;
					} else {
						this.editedContent = item.editedMsgRecords[item.editedMsgRecords.length - 1].editedText;
					}
					console.log(this.MemberData);
				},

				//update
				updateComment: function(item) {
					let _this = this;
					item.isEditable = false;
					item.content = this.editedContent;

					let editedMsgRecord = {
						MsgId: item.msgId,
						EditedText: _this.editedContent, // edited content
						EditedTime: new Date(), // current date and time
						Msg: _this.commentContent
					}
					axios.post('/api/recipes/EditedMsg', editedMsgRecord)
						.then(response => {
							this.addCommentSuccess(response); // success feedback
						});

				},

				//cancel
				cancelEditing: function(item) {
					item.isEditable = false;
					this.editedContent = '';
				},

				editedRecord: function(item) {
					let arrayText = item.editedMsgRecords.map(record => `${record.editedText} <br> ${record.editedTime}`).join('<br><br>');

					Swal.fire({
						title: '編輯紀錄',
						html: arrayText, // 注意我們在這裡使用 html 代替 text
						showConfirmButton: true
					});
				}
			}
		});
	</script>
} 