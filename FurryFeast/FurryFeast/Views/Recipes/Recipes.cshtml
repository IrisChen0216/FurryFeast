@model IEnumerable<Recipe>

@{
	ViewData["Title"] = "Recipes";
}

@section Style
{
	<link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" />
	<link href="~/css/recipestyle.css" rel="stylesheet"/>
	<link href="~/css/animation.css" rel="stylesheet" />

}

<div id="app" class="p-0 ">
	<div class="pb-4" style="background: white; border-radius: 6px;">
		<div class="index-header">
			<h2>寵物鮮食食譜</h2>
		</div>
@*		<img class="pb-4 m-0" src="~/image/pet_recipies.png" style="width: 100px;"/>
		*@		<div style="display: flex; justify-content: center; align-items: center;">
			<p class="centered">為你的毛孩營造更健康的飲食體驗，親手自製鮮食，讓每一口都充滿愛與關懷。我們用新鮮食材，製作出營養豐富，口感美味的鮮食。毛孩的健康，由你我共同守護。嘗試自製鮮食，讓愛，從口而入。</p>
		</div>
	</div>
	<div class="p-5 my-2" style="background: #ffd33b; border-radius: 6px;">
		<h4 style="color: white; letter-spacing: 3px; font-weight: 600;">請選擇動物類別</h4>
	</div>
	<div class="mt-2" style="border-radius: 6px; padding-top: 10%;padding-top: 10%; height: 50vh; background-size: cover; background-position: center center; background-repeat: no-repeat; background-image: url(&quot;/image/recipes-bg-1.jpg&quot;)">
		<div class=" p-0">
			<button class="me-2 btn-type" :class="{ 'active': isActiveDog }" type="button" v-on:click="chooseType(1)">
				<img src="~/image/bone.png" style="width: 60%; margin-bottom: 22px;"/>
				<h3>狗勾</h3></button>
			<button class="ms-2 btn-type" :class="{ 'active': isActiveCat }" type="button" v-on:click="chooseType(2)">
				<img src="~/image/sardines.png" style="width: 60%; margin-bottom: 22px;"/>
				<h3>貓貓</h3></button>
		</div>
		@*<button class="scroll-down" style="border: none;">
			<span class="arrow">&#8595;</span>
		</button>*@
		<div v-if="showDropdown">
			<button v-on:click="scrollTop(scropTarget)" class="slide-bottom"><img style="padding: 10px" src="~/image/down-arrow.png" /></button>
		</div>
	</div>

		
	<div id="recipe" class=" row m-0">
		<div class="col-md-3 mt-5">
			<ul id="recipesList" class="nav justify-content-center" style="border-radius: 6px; background: white">
				<li class="nav-item" v-for="item in filteredRecipe" :key="item.recipesId" v-on:click="getRecipe(item.recipesId)">{{item.name}}</li>
			</ul>
		</div>

		<div class="col ms-3 mt-5" v-if="showRecipeDetails">
			<div class="p-4" style="height: auto; background: white; border-radius: 6px;">
				<div class="row m-0" style="border-radius: 6px; background: brown;">
					<div style="color: white; border-radius: 6px;" class="py-3 recipes-header ">{{selectedRecipe.name}}</div>
					<div style="color: white; font-weight: 900; padding: 10px;">{{selectedRecipe.desc}}</div>
				</div>
				<div class="row m-0 mt-3 recipes-box">
					<div class="col p-0 ">
						<div class="recipes-card" style="border-right: 1px solid black;">
							<p class="recipes-text">準備食材</p>
						</div>
						<ul class="p-4" style="line-height: 30px;">
							<li v-for="item in selectedRecipeData">{{item}}</li>
						</ul>
					</div>
					<div class="col p-0">
						<div class="recipes-card">
							<p class="recipes-text">作法</p>
						</div>
						<ul class="ps-5 p-4" style="line-height: 30px; text-align: justify;">
							<li v-for="item in selectedRecipeMethod">{{item}}</li>
						</ul>
					</div>
				</div>
				<div class="row m-0 recipes-box">
					<div class="col p-4 pb-0">
						<p class="mb-2" style="font-size: 18px; color: black; letter-spacing: 1px; font-weight: 600;">Notes</p>
						<span>{{selectedRecipe.notes}}</span>
					</div>
				</div>
			</div>
			<div class=" text-center mb-2">
				<h4 class="py-3">回應區</h4>
				<template v-if="selectedRecipe">
					<template v-if="MemberData!=null">
						<form class="input-group">
							<textarea class="form-control" style="border-radius: 6px; margin-right: 9px;" v-model="commentContent" required></textarea>
							<button type="button" style="border-radius: 6px;" class="btn btn-primary" v-on:click="addComment">送出</button>
						</form>
					</template>
					<template v-else>
						<div class="border border-1 p-4 my-2" style="border-radius: 6px; background: white;">
							<p class="mb-2">請先登入會員</p>
							<button type="button" v-on:click="submitForm" class="nBtn login">登入</button>
						</div>
					</template>
				</template>


				@*msg*@
				<div class="response mt-3 ">
					<template v-for="item in selectedRecipe.msgBoards">
						<div class="my-4 p-3" v-if="item.active" style="background: white; border-radius: 6px;">
							<div class="my-2 align-content-end" v-if="!item.isEditable">
								<div class="row pb-2">
									<div class="text-end" v-if="MemberData!=null">
										<template v-if="MemberData.memberAccount == item.userAccount">
											<button type="button" class="nBtn edit" v-on:click="editComment(item);">編輯</button>
											<button type="button" class="nBtn delete" v-on:click="deleteComment(item);">刪除</button>
										</template>
									</div>
									<div class="col px-3 m-0 text-start">
										<p class="m-0 px-3 user-icon ">會員</p>
										<p class="ms-1" style="display: inline-block; font-weight: 600">{{item.userAccount}}</p>
										<p class="m-0 ps-2 pt-1" style="font-size: small;">{{relativeDate(item)}}</p>
									</div>

									<div class="px-3 py-2 m-0 col-8 text-start" v-if="item.editedMsgRecords.length==0">
										<p>{{item.content}}</p>
									</div>
									<div v-else class="px-3 py-2 m-0 col-8" style="max-height: 100%;">
										<div class="text-start" style="height: auto">
											<p>{{item.editedMsgRecords[item.editedMsgRecords.length-1].editedText}}</p>
										</div>
										<div class="text-end m-0" style="color: gray; font-size: small;" v-on:click="editedRecord(item)" data-swal-toast-template="#my-template">
											已編輯
										</div>
									</div>
								</div>
							</div>
							@*editing*@
							<div v-else>
								<p class="fw-bold">編輯留言</p>
								<form class="input-group pt-2">
									<textarea class="form-control" style="border-radius: 6px" v-model="editedContent" required></textarea>
									<button type="button" class="btn btn-primary ms-2" style="border-radius: 6px;" v-on:click="updateComment(item)">更新</button>
									<button type="button" class="btn btn-primary ms-2" style="border-radius: 6px;" v-on:click="cancelEditing(item)">取消</button>
								</form>
							</div>

						</div>
					</template>
				</div>
			</div>
		</div>
	</div>
</div>


@section Scripts
{
	<script src="https://unpkg.com/dayjs@1.8.21/dayjs.min.js"></script>
	<script src="https://cdn.jsdelivr.net/npm/dayjs@1.10.7/plugin/relativeTime.js"></script>

	<script>

		let app = new Vue({
			el: '#app',
			data: {
				scropTarget: "recipe",
				showDropdown: false,
				isActiveDog: false,
				isActiveCat: false,
				MemberData: [],
				editedMsg: [],
				recipes: [],
				filteredRecipe: [], //type篩選出來的食譜
				selectedRecipe: [],
				selectedRecipeId: null, //點擊到的食譜
				selectedRecipeData: "",
				selectedRecipeMethod: "",
				commentContent: "",
				editedContent: "",
				dateTime: "",
				showRecipeDetails: false
			},
			mounted: async function() {
				const _this = this;
				await _this.allRecipes();
				_this.getUserData();
				//window.addEventListener('scroll', _this.checkIfTop(_this.scropTarget));

				let params = new URLSearchParams(window.location.search);
				//let returnUrl = params.get('returnUrl');
				let typeID = params.get('typeID');
				let recipeID = params.get('recipeID');

				if (typeID != null && recipeID != null) {
					_this.showDropdown = true;
					_this.chooseType(typeID);
					_this.getRecipe(recipeID);

				}
			},
			beforeDestroy() {
				const _this = this;
				//window.removeEventListener('scroll', _this.checkIfTop(_this.scropTarget));
			},
			methods: {
				submitForm: function() {
					let _this = this;
					let typeID = _this.selectedRecipe.petTypesId;
					let recipeID = _this.selectedRecipeId;

					let returnUrl = '&typeID=' + encodeURIComponent(typeID) + '&recipeID=' + encodeURIComponent(recipeID);

					// 將 returnUrl 作為參數傳遞到登入頁面
					window.location.href = '/Member/Login?' + returnUrl;

				},

				getUserData: function() {
					const _this = this;
					axios('/api/recipes/GetUserData').then(response => {
						if (response.status) {
							_this.MemberData = response.data.data;
						}
						if (_this.MemberData) {
							console.log(_this.MemberData);
						}
					});
				},

				relativeDate: function(item) {
					dayjs.locale('zh-cn',
						{
							relativeTime: {
								future: "in %s",
								past: "%s前",
								s: '幾秒',
								m: "1 分",
								mm: "%d 分",
								h: "an 小時",
								hh: "%d 小時",
								d: "a 天",
								dd: "%d 天",
								M: "a 個月",
								MM: "%d 個月",
								y: "a 年",
								yy: "%d 年"
							}
						});
					// 相對時間
					dayjs.extend(dayjs_plugin_relativeTime);
					return dayjs(item.dateTime).fromNow();
				},

				allRecipes: async function() {
					const _this = this;
					const request = {};
					await axios.get('/api/recipes/AllData', request).then(response => {
						_this.recipes = response.data;
						const recipesData = [];

						for (let i = 0; i < _this.recipes.length; i++) {
							const item = _this.recipes[i].allData;
							item.Edit = false; // 編輯狀態

							item.msgBoards = item.msgBoards.map((msgBoard) => ({
								...msgBoard,
								isEditable: false
							}));

							recipesData.push(item);
						}

						_this.recipes = recipesData;
						console.log(_this.recipes);
					});
				},

				chooseType: async function(typeNum) {

					const _this = this;
					_this.showDropdown = true;
					_this.filteredRecipe = [];
					for (let i = 0; i < _this.recipes.length; i++) {
						if (_this.recipes[i].petTypesId == typeNum) { //type:1= dog,2=cat
							const recipeData = _this.recipes[i];
							_this.filteredRecipe.push(recipeData);
						}
					}
					if (typeNum == 1) {
						_this.isActiveDog = true;
						_this.isActiveCat = false;
						_this.getRecipe(this.filteredRecipe[0].recipesId);
					} else {
						_this.isActiveDog = false;
						_this.isActiveCat = true;
						_this.getRecipe(this.filteredRecipe[0].recipesId);
					}

				},

				scrollTop: function(id) {
					this.showDropdown = false;
					let scroll = new SmoothScroll();
					let anchor = document.getElementById(`${id}`);
					scroll.animateScroll(anchor);
				},

				splitArr: function(item, symbol) {
					return item.split(symbol);
				},

				getRecipe: function(recipesId) {
					const _this = this;
					var selectedItem = _this.filteredRecipe.find(x => x.recipesId == recipesId);
					console.log(selectedItem);
					_this.selectedRecipeId = selectedItem.recipesId;
					_this.selectedRecipe = selectedItem;
					_this.selectedRecipeData = _this.splitArr(selectedItem.data, "/");
					_this.selectedRecipeMethod = _this.splitArr(selectedItem.method, "/");
					_this.showRecipeDetails = true;
				},

				//post 新增
				addComment: function() {
					const _this = this;

					const msgBoard = {
						UserId: _this.MemberData.memberId,
						MsgRecipesId: _this.selectedRecipe.recipesId,
						MsgContent: _this.commentContent, //留言內容
						MsgDateTime: moment().format(), //時間
						MsgActive: true //狀態
					};

					console.log(msgBoard);
					axios.post('/api/recipes/AddComment', msgBoard)
						.then(response => {
							console.log(response);
							_this.addCommentSuccess(); // success feedback
							_this.commentContent = ''; // empty content
						});

				},
				//success
				addCommentSuccess: function() {
					Swal.fire({
						position: 'center',
						icon: 'success',
						title: '留言成功',
						showConfirmButton: false,
						timer: 1500
					});
				},
				editCommentSuccess: function() {
					Swal.fire({
						position: 'center',
						icon: 'success',
						title: '編輯成功',
						showConfirmButton: false,
						timer: 1500
					});
				},

				// Edit
				editComment: function(item) {
					item.isEditable = true;
					if (item.editedMsgRecords.length == 0) {
						this.editedContent = item.content;
					} else {
						this.editedContent = item.editedMsgRecords[item.editedMsgRecords.length - 1].editedText;
					}
					console.log(this.MemberData);
				},

				//update
				updateComment: function(item) {
					const _this = this;
					item.isEditable = false;
					item.content = this.editedContent;

					const editedMsgRecord = {
						MsgId: item.msgId,
						EditedText: _this.editedContent,
						EditedTime: moment().format()
					};
					axios.post('/api/recipes/EditedMsg', editedMsgRecord)
						.then(response => {
							this.editCommentSuccess(response); // success feedback
						});

				},

				//cancel
				cancelEditing: function(item) {
					item.isEditable = false;
					this.editedContent = '';
				},

				// delete in Client only
				deleteComment: function(item) {
					item.active = false;

					const msgActive = {
						MsgId: item.msgId,
						MsgActive: item.active //狀態

					};
					console.log(msgActive);
					axios.post('/api/recipes/SetActive', msgActive)
						.then(response => {
							console.log(response);
						});

				},

				editedRecord: function(item) {
					let firstTime = dayjs(item.dateTime).fromNow();
					let firstText = `<div class="edit-Record"><div class="edited-text d-inline">${item.content}</div><div class="edited-time d-inline">${firstTime}</div></div>`;

					let editedRecordsArray = item.editedMsgRecords.map(record => {
						let editedTime = dayjs(record.editedTime).fromNow();
						return `<div class="edit-Record"><div class="edited-text d-inline">${record.editedText}</div><div class="edited-time d-inline">${editedTime}</div></div>`;
					});
					editedRecordsArray.unshift(firstText);
					const arrayText = editedRecordsArray.join('<br>');
					Swal.fire({
						icon: 'info',
						title: '編輯紀錄',
						html: arrayText,
						showConfirmButton: true,
						scrollbarPadding: true
					});


				}
			}
		});
	</script>
}